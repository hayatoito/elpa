;;; gptel-aibo-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))



;;; Generated autoloads from gptel-aibo.el

(autoload 'gptel-aibo-mode "gptel-aibo" "\
Minor mode for `gptel-aibo' interacting with LLMs.

This is a minor mode.  If called interactively, toggle the `GPTel-Aibo
mode' mode.  If the prefix argument is positive, enable the mode, and if
it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `gptel-aibo-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

\\{gptel-aibo-mode-map}

(fn &optional ARG)" t)
(autoload 'gptel-aibo "gptel-aibo" "\
Open or initialize a GPTEL-AIBO console buffer.

If called interactively with a prefix argument, prompt for a project-specific
console buffer or create a new one. Sets up the buffer to use `gptel-aibo-mode`
and handles project-specific configurations if applicable. Displays the console
buffer after initialization.

Optional argument BUFFER specifies the name of the buffer to manage.

(fn &optional BUFFER)" t)
(autoload 'gptel-aibo-send "gptel-aibo" "\
Send the current context and request to GPT for processing." t)
(autoload 'gptel-aibo-complete-at-point "gptel-aibo" "\
Complete text at point using LLM suggestions.

The response is inserted as an overlay with these keybindings:
- TAB or RET: Accept and move to the end of the overlay.
- Any other key: Reject and execute its normal action." t)
(autoload 'gptel-aibo-complete-mode "gptel-aibo" "\
Minor mode `gptel-aibo' llm completions.

This is a minor mode.  If called interactively, toggle the
`GPTel-Aibo-Complete mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `gptel-aibo-complete-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

\\{gptel-aibo-complete-mode-map}

(fn &optional ARG)" t)
(register-definition-prefixes "gptel-aibo" '("gptel-aibo-"))


;;; Generated autoloads from gptel-aibo-action.el

(register-definition-prefixes "gptel-aibo-action" '("gptel-aibo--"))


;;; Generated autoloads from gptel-aibo-action-org-parser.el

(register-definition-prefixes "gptel-aibo-action-org-parser" '("gptel-aibo--"))


;;; Generated autoloads from gptel-aibo-action-parser.el

(register-definition-prefixes "gptel-aibo-action-parser" '("gptel-aibo--"))


;;; Generated autoloads from gptel-aibo-context.el

(register-definition-prefixes "gptel-aibo-context" '("gptel-aibo-"))


;;; Generated autoloads from gptel-aibo-face.el

(register-definition-prefixes "gptel-aibo-face" '("gptel-aibo-"))


;;; Generated autoloads from gptel-aibo-inplace-diff.el

(register-definition-prefixes "gptel-aibo-inplace-diff" '("gptel-aibo--"))


;;; Generated autoloads from gptel-aibo-planner.el

(register-definition-prefixes "gptel-aibo-planner" '("gptel-aibo-"))


;;; Generated autoloads from gptel-aibo-summon.el

(autoload 'gptel-aibo-summon "gptel-aibo-summon" "\
Summon AIBO to assist with code completion at point.
This function initiates an asynchronous completion request using
the current buffer's content and position." t)
(register-definition-prefixes "gptel-aibo-summon" '("gptel-aibo-"))


;;; Generated autoloads from gptel-aibo-tools.el

(register-definition-prefixes "gptel-aibo-tools" '("gptel-aibo-tools--project-root"))

;;; End of scraped data

(provide 'gptel-aibo-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; gptel-aibo-autoloads.el ends here
